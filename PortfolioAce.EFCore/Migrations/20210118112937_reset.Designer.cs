// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PortfolioAce.EFCore;

namespace PortfolioAce.EFCore.Migrations
{
    [DbContext(typeof(PortfolioAceDbContext))]
    [Migration("20210118112937_reset")]
    partial class reset
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9");

            modelBuilder.Entity("PortfolioAce.Domain.Models.ApplicationSettings", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SettingName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SettingValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SettingId");

                    b.ToTable("ApplicationSettings");

                    b.HasData(
                        new
                        {
                            SettingId = 1,
                            Description = "Alpha Vantage API Key",
                            SettingName = "AlphaVantageAPI",
                            SettingValue = "demo"
                        },
                        new
                        {
                            SettingId = 2,
                            Description = "Financial Modelling Prep API Key",
                            SettingName = "FMPrepAPI",
                            SettingValue = "demo"
                        });
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.BackOfficeModels.FundInvestorBO", b =>
                {
                    b.Property<int>("FundInvestorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FundId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("HighWaterMark")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("InceptionDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("InvestorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FundInvestorId");

                    b.HasIndex("FundId");

                    b.HasIndex("InvestorId");

                    b.ToTable("FundInvestor");
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.BackOfficeModels.LinkedTradesBO", b =>
                {
                    b.Property<int>("LinkedTradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("LinkedTradeId");

                    b.ToTable("bo_LinkedTrades");
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.BackOfficeModels.TransactionsBO", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustodianId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Fees")
                        .HasColumnType("TEXT");

                    b.Property<int>("FundId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LinkedTradeId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("TEXT");

                    b.Property<int>("SecurityId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SettleDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TradeAmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TradeDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isCashTransaction")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isLocked")
                        .HasColumnType("INTEGER");

                    b.HasKey("TransactionId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustodianId");

                    b.HasIndex("FundId");

                    b.HasIndex("LinkedTradeId");

                    b.HasIndex("SecurityId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("bo_Transactions");
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.BackOfficeModels.TransferAgencyBO", b =>
                {
                    b.Property<int>("TransferAgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Fees")
                        .HasColumnType("TEXT");

                    b.Property<int>("FundId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FundInvestorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNavFinal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IssueType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NAVPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TradeAmount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TransactionSettleDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Units")
                        .HasColumnType("TEXT");

                    b.HasKey("TransferAgencyId");

                    b.HasIndex("FundId");

                    b.HasIndex("FundInvestorId");

                    b.ToTable("bo_TransferAgency");
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.Dimensions.AccountingPeriodsDIM", b =>
                {
                    b.Property<int>("PeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AccountingDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("AccountingPeriodsDIMPeriodId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FundId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isLocked")
                        .HasColumnType("INTEGER");

                    b.HasKey("PeriodId");

                    b.HasIndex("AccountingPeriodsDIMPeriodId");

                    b.HasIndex("FundId");

                    b.ToTable("dim_Periods");
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.Dimensions.AssetClassDIM", b =>
                {
                    b.Property<int>("AssetClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AssetClassId");

                    b.ToTable("dim_AssetClasses");

                    b.HasData(
                        new
                        {
                            AssetClassId = 1,
                            Name = "Equity"
                        },
                        new
                        {
                            AssetClassId = 2,
                            Name = "Cryptocurrency"
                        },
                        new
                        {
                            AssetClassId = 3,
                            Name = "FX"
                        },
                        new
                        {
                            AssetClassId = 4,
                            Name = "Cash"
                        },
                        new
                        {
                            AssetClassId = 5,
                            Name = "InterestRate"
                        },
                        new
                        {
                            AssetClassId = 6,
                            Name = "FXForward"
                        });
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.Dimensions.CurrenciesDIM", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CurrencyId");

                    b.ToTable("dim_Currencies");

                    b.HasData(
                        new
                        {
                            CurrencyId = 1,
                            Name = "PoundSterling",
                            Symbol = "GBP"
                        },
                        new
                        {
                            CurrencyId = 2,
                            Name = "Euro",
                            Symbol = "EUR"
                        },
                        new
                        {
                            CurrencyId = 3,
                            Name = "UnitedStatesDollar",
                            Symbol = "USD"
                        },
                        new
                        {
                            CurrencyId = 4,
                            Name = "JapaneseYen",
                            Symbol = "JPY"
                        },
                        new
                        {
                            CurrencyId = 5,
                            Name = "IndianRupee",
                            Symbol = "INR"
                        },
                        new
                        {
                            CurrencyId = 6,
                            Name = "SwissFranc",
                            Symbol = "CHF"
                        },
                        new
                        {
                            CurrencyId = 7,
                            Name = "CanadianDollar",
                            Symbol = "CAD"
                        },
                        new
                        {
                            CurrencyId = 8,
                            Name = "AustralianDollar",
                            Symbol = "AUD"
                        });
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.Dimensions.CustodiansDIM", b =>
                {
                    b.Property<int>("CustodianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CustodianId");

                    b.ToTable("dim_Custodians");

                    b.HasData(
                        new
                        {
                            CustodianId = 1,
                            Name = "Default",
                            Symbol = "Default"
                        });
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.Dimensions.InvestorsDIM", b =>
                {
                    b.Property<int>("InvestorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Domicile")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("NativeLanguage")
                        .HasColumnType("TEXT");

                    b.HasKey("InvestorId");

                    b.ToTable("Investors");
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.Dimensions.IssueTypesDIM", b =>
                {
                    b.Property<int>("IssueTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IssueTypeID");

                    b.ToTable("dim_IssueTypes");

                    b.HasData(
                        new
                        {
                            IssueTypeID = 1,
                            TypeName = "Subscription"
                        },
                        new
                        {
                            IssueTypeID = 2,
                            TypeName = "Redemption"
                        });
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.Dimensions.NavFrequencyDIM", b =>
                {
                    b.Property<int>("NavFrequencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("NavFrequencyId");

                    b.ToTable("dim_NavFrequencies");

                    b.HasData(
                        new
                        {
                            NavFrequencyId = 1,
                            Frequency = "Daily"
                        },
                        new
                        {
                            NavFrequencyId = 2,
                            Frequency = "Monthly"
                        });
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.Dimensions.SecuritiesDIM", b =>
                {
                    b.Property<int>("SecurityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlphaVantageSymbol")
                        .HasColumnType("TEXT");

                    b.Property<int>("AssetClassId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FMPSymbol")
                        .HasColumnType("TEXT");

                    b.Property<string>("ISIN")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SecurityId");

                    b.HasIndex("AssetClassId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("dim_Securities");

                    b.HasData(
                        new
                        {
                            SecurityId = 1,
                            AssetClassId = 4,
                            CurrencyId = 1,
                            SecurityName = "CASH GBP",
                            Symbol = "GBPc"
                        },
                        new
                        {
                            SecurityId = 2,
                            AssetClassId = 4,
                            CurrencyId = 2,
                            SecurityName = "CASH EURO",
                            Symbol = "EURc"
                        },
                        new
                        {
                            SecurityId = 3,
                            AssetClassId = 4,
                            CurrencyId = 3,
                            SecurityName = "CASH USD",
                            Symbol = "USDc"
                        },
                        new
                        {
                            SecurityId = 4,
                            AssetClassId = 4,
                            CurrencyId = 4,
                            SecurityName = "CASH JPY",
                            Symbol = "JPYc"
                        },
                        new
                        {
                            SecurityId = 5,
                            AssetClassId = 4,
                            CurrencyId = 5,
                            SecurityName = "CASH INR",
                            Symbol = "INRc"
                        },
                        new
                        {
                            SecurityId = 6,
                            AssetClassId = 4,
                            CurrencyId = 6,
                            SecurityName = "CASH CHF",
                            Symbol = "CHFc"
                        },
                        new
                        {
                            SecurityId = 7,
                            AssetClassId = 4,
                            CurrencyId = 7,
                            SecurityName = "CASH CAD",
                            Symbol = "CADc"
                        },
                        new
                        {
                            SecurityId = 8,
                            AssetClassId = 4,
                            CurrencyId = 8,
                            SecurityName = "CASH AUD",
                            Symbol = "AUDc"
                        },
                        new
                        {
                            SecurityId = 9,
                            AssetClassId = 5,
                            CurrencyId = 1,
                            SecurityName = "BOE Base Rate",
                            Symbol = "GBP_IRBASE"
                        },
                        new
                        {
                            SecurityId = 10,
                            AssetClassId = 5,
                            CurrencyId = 2,
                            SecurityName = "ECB Main Refinancing Rate",
                            Symbol = "EUR_IRBASE"
                        },
                        new
                        {
                            SecurityId = 11,
                            AssetClassId = 5,
                            CurrencyId = 3,
                            SecurityName = "Federal Funds Rate",
                            Symbol = "USD_IRBASE"
                        },
                        new
                        {
                            SecurityId = 12,
                            AssetClassId = 5,
                            CurrencyId = 4,
                            SecurityName = "BOJ Mutan Rate",
                            Symbol = "JPY_IRBASE"
                        },
                        new
                        {
                            SecurityId = 13,
                            AssetClassId = 5,
                            CurrencyId = 5,
                            SecurityName = "BOI Repurchase Rate",
                            Symbol = "INR_IRBASE"
                        },
                        new
                        {
                            SecurityId = 14,
                            AssetClassId = 5,
                            CurrencyId = 6,
                            SecurityName = "SNB Policy Rate",
                            Symbol = "CHF_IRBASE"
                        },
                        new
                        {
                            SecurityId = 15,
                            AssetClassId = 5,
                            CurrencyId = 7,
                            SecurityName = "BOC Policy Rate",
                            Symbol = "CAD_IRBASE"
                        },
                        new
                        {
                            SecurityId = 16,
                            AssetClassId = 5,
                            CurrencyId = 8,
                            SecurityName = "RBA Cash Rate Target",
                            Symbol = "AUD_IRBASE"
                        });
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.Dimensions.TransactionTypeDIM", b =>
                {
                    b.Property<int>("TransactionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeClass")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TransactionTypeId");

                    b.ToTable("dim_TransactionType");

                    b.HasData(
                        new
                        {
                            TransactionTypeId = 1,
                            Direction = "None",
                            TypeClass = "SecurityTrade",
                            TypeName = "Trade"
                        },
                        new
                        {
                            TransactionTypeId = 2,
                            Direction = "None",
                            TypeClass = "SecurityTrade",
                            TypeName = "Dividends"
                        },
                        new
                        {
                            TransactionTypeId = 3,
                            Direction = "Inflow",
                            TypeClass = "CashTrade",
                            TypeName = "Income"
                        },
                        new
                        {
                            TransactionTypeId = 4,
                            Direction = "Outflow",
                            TypeClass = "CashTrade",
                            TypeName = "Expense"
                        },
                        new
                        {
                            TransactionTypeId = 5,
                            Direction = "Inflow",
                            TypeClass = "CashTrade",
                            TypeName = "Deposit"
                        },
                        new
                        {
                            TransactionTypeId = 6,
                            Direction = "Outflow",
                            TypeClass = "CashTrade",
                            TypeName = "Withdrawal"
                        },
                        new
                        {
                            TransactionTypeId = 7,
                            Direction = "None",
                            TypeClass = "CashTrade",
                            TypeName = "Interest"
                        },
                        new
                        {
                            TransactionTypeId = 8,
                            Direction = "Outflow",
                            TypeClass = "CashTrade",
                            TypeName = "ManagementFee"
                        },
                        new
                        {
                            TransactionTypeId = 9,
                            Direction = "Outflow",
                            TypeClass = "CashTrade",
                            TypeName = "PerformanceFee"
                        },
                        new
                        {
                            TransactionTypeId = 10,
                            Direction = "None",
                            TypeClass = "CashTrade",
                            TypeName = "Miscellaneous"
                        },
                        new
                        {
                            TransactionTypeId = 11,
                            Direction = "Inflow",
                            TypeClass = "CashTrade",
                            TypeName = "FXBuy"
                        },
                        new
                        {
                            TransactionTypeId = 12,
                            Direction = "Outflow",
                            TypeClass = "CashTrade",
                            TypeName = "FXSell"
                        },
                        new
                        {
                            TransactionTypeId = 13,
                            Direction = "None",
                            TypeClass = "FXTrade",
                            TypeName = "FXTrade"
                        },
                        new
                        {
                            TransactionTypeId = 14,
                            Direction = "None",
                            TypeClass = "FXTrade",
                            TypeName = "FXTradeCollapse"
                        });
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.FactTables.FundPerformanceFACT", b =>
                {
                    b.Property<int>("PerformanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("PerformanceID");

                    b.ToTable("fact_FundPerformance");
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.FactTables.InvestorHoldingsFACT", b =>
                {
                    b.Property<int>("HoldingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AverageCost")
                        .HasColumnType("TEXT");

                    b.Property<int>("FundId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("HighWaterMark")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("HoldingDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("InvestorId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ManagementFeesAccrued")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NetValuation")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PerformanceFeesAccrued")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Units")
                        .HasColumnType("TEXT");

                    b.HasKey("HoldingId");

                    b.HasIndex("FundId");

                    b.HasIndex("InvestorId");

                    b.ToTable("fact_InvestorHoldings");
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.FactTables.NAVPriceStoreFACT", b =>
                {
                    b.Property<int>("NAVPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FinalisedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("FundId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NAVPeriodId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("NAVPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NetAssetValue")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SharesOutstanding")
                        .HasColumnType("TEXT");

                    b.HasKey("NAVPriceId");

                    b.HasIndex("FundId");

                    b.HasIndex("NAVPeriodId");

                    b.ToTable("fact_NAVPrices");
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.FactTables.PositionFACT", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssetClassId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AverageCost")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FundId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MarketValue")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PositionDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RealisedPnl")
                        .HasColumnType("TEXT");

                    b.Property<int>("SecurityId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnrealisedPnl")
                        .HasColumnType("TEXT");

                    b.HasKey("PositionId");

                    b.HasIndex("AssetClassId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("FundId");

                    b.HasIndex("SecurityId");

                    b.ToTable("fact_Positions");
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.Fund", b =>
                {
                    b.Property<int>("FundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BaseCurrency")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(3);

                    b.Property<string>("FundName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasHighWaterMark")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("HurdleRate")
                        .HasColumnType("decimal(6,4)");

                    b.Property<string>("HurdleType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsInitialised")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LaunchDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ManagementFee")
                        .HasColumnType("decimal(6,4)");

                    b.Property<decimal>("MinimumInvestment")
                        .HasColumnType("TEXT");

                    b.Property<string>("NAVFrequency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PerformanceFee")
                        .HasColumnType("decimal(6,4)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FundId");

                    b.ToTable("Fund");
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.SecurityPriceStore", b =>
                {
                    b.Property<int>("PriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ClosePrice")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("PriceSource")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SecurityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PriceId");

                    b.HasIndex("SecurityId");

                    b.ToTable("SecurityPrices");
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.BackOfficeModels.FundInvestorBO", b =>
                {
                    b.HasOne("PortfolioAce.Domain.Models.Fund", "Fund")
                        .WithMany()
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioAce.Domain.Models.Dimensions.InvestorsDIM", "Investor")
                        .WithMany("FundInvestor")
                        .HasForeignKey("InvestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.BackOfficeModels.TransactionsBO", b =>
                {
                    b.HasOne("PortfolioAce.Domain.Models.Dimensions.CurrenciesDIM", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioAce.Domain.Models.Dimensions.CustodiansDIM", "Custodian")
                        .WithMany()
                        .HasForeignKey("CustodianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioAce.Domain.Models.Fund", "Fund")
                        .WithMany("Transactions")
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioAce.Domain.Models.BackOfficeModels.LinkedTradesBO", "LinkedTrades")
                        .WithMany("Transactions")
                        .HasForeignKey("LinkedTradeId");

                    b.HasOne("PortfolioAce.Domain.Models.Dimensions.SecuritiesDIM", "Security")
                        .WithMany()
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioAce.Domain.Models.Dimensions.TransactionTypeDIM", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.BackOfficeModels.TransferAgencyBO", b =>
                {
                    b.HasOne("PortfolioAce.Domain.Models.Fund", "Fund")
                        .WithMany("TransferAgent")
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioAce.Domain.Models.BackOfficeModels.FundInvestorBO", "FundInvestor")
                        .WithMany()
                        .HasForeignKey("FundInvestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.Dimensions.AccountingPeriodsDIM", b =>
                {
                    b.HasOne("PortfolioAce.Domain.Models.Dimensions.AccountingPeriodsDIM", null)
                        .WithMany("NavAccountingPeriods")
                        .HasForeignKey("AccountingPeriodsDIMPeriodId");

                    b.HasOne("PortfolioAce.Domain.Models.Fund", "Fund")
                        .WithMany()
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.Dimensions.SecuritiesDIM", b =>
                {
                    b.HasOne("PortfolioAce.Domain.Models.Dimensions.AssetClassDIM", "AssetClass")
                        .WithMany()
                        .HasForeignKey("AssetClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioAce.Domain.Models.Dimensions.CurrenciesDIM", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.FactTables.InvestorHoldingsFACT", b =>
                {
                    b.HasOne("PortfolioAce.Domain.Models.Fund", "Fund")
                        .WithMany()
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioAce.Domain.Models.Dimensions.InvestorsDIM", "Investor")
                        .WithMany()
                        .HasForeignKey("InvestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.FactTables.NAVPriceStoreFACT", b =>
                {
                    b.HasOne("PortfolioAce.Domain.Models.Fund", "Fund")
                        .WithMany("NavPrices")
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioAce.Domain.Models.Dimensions.AccountingPeriodsDIM", "NAVPeriod")
                        .WithMany()
                        .HasForeignKey("NAVPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.FactTables.PositionFACT", b =>
                {
                    b.HasOne("PortfolioAce.Domain.Models.Dimensions.AssetClassDIM", "AssetClass")
                        .WithMany()
                        .HasForeignKey("AssetClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioAce.Domain.Models.Dimensions.CurrenciesDIM", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioAce.Domain.Models.Fund", "Fund")
                        .WithMany()
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortfolioAce.Domain.Models.Dimensions.SecuritiesDIM", "Security")
                        .WithMany()
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortfolioAce.Domain.Models.SecurityPriceStore", b =>
                {
                    b.HasOne("PortfolioAce.Domain.Models.Dimensions.SecuritiesDIM", "Security")
                        .WithMany()
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
